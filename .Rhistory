Before we start, it might be a good idea to screen out windows that have really high coverage in B73, these are likely to represent repeatitive or poorly assembled region of the genome and should be excluded from further consideration.
```{r,warning=FALSE,message=FALSE}
#set the max read depth
maxDepth<-15
minDepth<-0.1
gcNorm<-subset(gcNorm,subset=gcNorm$B73 < maxDepth )
gcNorm<-subset(gcNorm, subset= gcNorm$B73 > minDepth)
```
## Runnig the CNV calling function
```{r, message=FALSE,warning=FALSE,results='hide'}
source("/Users/simonrenny-byfield/GitHubRepos/cnvwin/scripts/callCNV.R")
cnvs<-callCNV(gcNorm,samples,limit=1.2,limitHom=5)
dev.off()
# take a look at the genic region in terms of coverage
cov<-GRanges(seqnames=gcNorm$chr, ranges=IRanges(gcNorm$start,gcNorm$end),coverage=subset(gcNorm,select="B73"))
# check for overlaps between gcNorm and gff
geneData<-subsetByOverlaps(cov,gff,type = "within")
```
```{r,message=FALSE,warning=FALSE}
hist(geneData$coverage.B73, breaks = 40)
# load in the coverage data
load("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/gc_normalized_2000bp_median.RData")
gcNorm<-chr6Coverage
# turn into a GRanges object
gcNorm<-GRanges(seqnames=gcNorm$V1, ranges=IRanges(gcNorm$V2,gcNorm$V3))
###
# Check for overlaps and unify the data
###
# first make a variable not modify, with NA values
values(gcNorm)$td<-NA
# now check for overlaps, require "equal" because we want complete overlap
overlaps<-as.matrix(findOverlaps(gcNorm,td.ranges, type="equal"))
# use the hit matrix to add a value of TD to the coverage data set
values(gcNorm)$td[overlaps[,1]]<-td.ranges$td[overlaps[,2]]
# now turn in back into a datatable
gcNorm<-data.table(chr=as.vector(seqnames(gcNorm)),start=start(gcNorm),end=end(gcNorm),td=gcNorm$td)
#remove the positional info and the gc info
gcNorm<-cbind(gcNorm,chr6Coverage[-c(1:3,26)])
# do some clearing up
chr6Coverage<-NULL
gc()
```
## Load in the gene annotation data
Now we have unified the coverage and Tajima's D datasets we can now begin to load in the gene annotation data. Included with this will be the neccesary maize1 and maize2 data.
```{r}
# load in the annotation data
gff<-fread("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/AGPv3.22_primary_transcripts.bed")
gff<-GRanges(seqnames=gff$V1, ranges=IRanges(gff$V2,gff$V3),name=gff$V4)
# remove scaffolds
gff<-subset(gff,subset=seqnames %in% c(1:10))
# prepare the GRanges object to receive the sub-genome info
values(gff)$sub.genome<-"no syn"
# load in the maize1 maize 2 subgenomes info
subGenomes<-read.csv("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/data/gene_by_sugenome.csv",na.strings=c("",".","NA"))
# attribute the correct sub-genome to each annotation
values(gff)$sub.genome[gff$name %in% subGenomes[,1]]<-"M1"
values(gff)$sub.genome[gff$name %in% subGenomes[,2]]<-"M2"
```
## Add samples names to the dataset
```{r,warning=FALSE,message=FALSE}
samples<-read.table("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/sample_list.txt")
samples<-as.vector(gsub(".sorted.bam","",samples$V1))
setnames(gcNorm,colnames(gcNorm),c(colnames(gcNorm)[1:4],samples))
```
## Filtering the data
Before we start, it might be a good idea to screen out windows that have really high coverage in B73, these are likely to represent repeatitive or poorly assembled region of the genome and should be excluded from further consideration.
```{r,warning=FALSE,message=FALSE}
#set the max read depth
maxDepth<-15
minDepth<-0.25
gcNorm<-subset(gcNorm,subset=gcNorm$B73 < maxDepth )
gcNorm<-subset(gcNorm, subset= gcNorm$B73 > minDepth)
```
## Runnig the CNV calling function
```{r, message=FALSE,warning=FALSE,results='hide'}
source("/Users/simonrenny-byfield/GitHubRepos/cnvwin/scripts/callCNV.R")
cnvs<-callCNV(gcNorm,samples,limit=1.2,limitHom=5)
dev.off()
# take a look at the genic region in terms of coverage
cov<-GRanges(seqnames=gcNorm$chr, ranges=IRanges(gcNorm$start,gcNorm$end),coverage=subset(gcNorm,select="B73"))
# check for overlaps between gcNorm and gff
geneData<-subsetByOverlaps(cov,gff,type = "within")
```
```{r,message=FALSE,warning=FALSE}
hist(geneData$coverage.B73, breaks = 40)
# load in the coverage data
load("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/gc_normalized_2000bp_median.RData")
gcNorm<-chr6Coverage
# turn into a GRanges object
gcNorm<-GRanges(seqnames=gcNorm$V1, ranges=IRanges(gcNorm$V2,gcNorm$V3))
###
# Check for overlaps and unify the data
###
# first make a variable not modify, with NA values
values(gcNorm)$td<-NA
# now check for overlaps, require "equal" because we want complete overlap
overlaps<-as.matrix(findOverlaps(gcNorm,td.ranges, type="equal"))
# use the hit matrix to add a value of TD to the coverage data set
values(gcNorm)$td[overlaps[,1]]<-td.ranges$td[overlaps[,2]]
# now turn in back into a datatable
gcNorm<-data.table(chr=as.vector(seqnames(gcNorm)),start=start(gcNorm),end=end(gcNorm),td=gcNorm$td)
#remove the positional info and the gc info
gcNorm<-cbind(gcNorm,chr6Coverage[-c(1:3,26)])
# do some clearing up
chr6Coverage<-NULL
gc()
```
## Load in the gene annotation data
Now we have unified the coverage and Tajima's D datasets we can now begin to load in the gene annotation data. Included with this will be the neccesary maize1 and maize2 data.
```{r}
# load in the annotation data
gff<-fread("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/AGPv3.22_primary_transcripts.bed")
gff<-GRanges(seqnames=gff$V1, ranges=IRanges(gff$V2,gff$V3),name=gff$V4)
# remove scaffolds
gff<-subset(gff,subset=seqnames %in% c(1:10))
# prepare the GRanges object to receive the sub-genome info
values(gff)$sub.genome<-"no syn"
# load in the maize1 maize 2 subgenomes info
subGenomes<-read.csv("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/data/gene_by_sugenome.csv",na.strings=c("",".","NA"))
# attribute the correct sub-genome to each annotation
values(gff)$sub.genome[gff$name %in% subGenomes[,1]]<-"M1"
values(gff)$sub.genome[gff$name %in% subGenomes[,2]]<-"M2"
```
## Add samples names to the dataset
```{r,warning=FALSE,message=FALSE}
samples<-read.table("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/sample_list.txt")
samples<-as.vector(gsub(".sorted.bam","",samples$V1))
setnames(gcNorm,colnames(gcNorm),c(colnames(gcNorm)[1:4],samples))
```
## Filtering the data
Before we start, it might be a good idea to screen out windows that have really high coverage in B73, these are likely to represent repeatitive or poorly assembled region of the genome and should be excluded from further consideration.
```{r,warning=FALSE,message=FALSE}
#set the max read depth
maxDepth<-15
minDepth<-1
gcNorm<-subset(gcNorm,subset=gcNorm$B73 < maxDepth )
gcNorm<-subset(gcNorm, subset= gcNorm$B73 > minDepth)
```
## Runnig the CNV calling function
```{r, message=FALSE,warning=FALSE,results='hide'}
source("/Users/simonrenny-byfield/GitHubRepos/cnvwin/scripts/callCNV.R")
cnvs<-callCNV(gcNorm,samples,limit=1.2,limitHom=5)
dev.off()
# take a look at the genic region in terms of coverage
cov<-GRanges(seqnames=gcNorm$chr, ranges=IRanges(gcNorm$start,gcNorm$end),coverage=subset(gcNorm,select="B73"))
# check for overlaps between gcNorm and gff
geneData<-subsetByOverlaps(cov,gff,type = "within")
```
```{r,message=FALSE,warning=FALSE}
hist(geneData$coverage.B73, breaks = 40)
cnvs$cnvs
# load in the coverage data
load("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/gc_normalized_2000bp_median.RData")
gcNorm<-chr6Coverage
# turn into a GRanges object
gcNorm<-GRanges(seqnames=gcNorm$V1, ranges=IRanges(gcNorm$V2,gcNorm$V3))
###
# Check for overlaps and unify the data
###
# first make a variable not modify, with NA values
values(gcNorm)$td<-NA
# now check for overlaps, require "equal" because we want complete overlap
overlaps<-as.matrix(findOverlaps(gcNorm,td.ranges, type="equal"))
# use the hit matrix to add a value of TD to the coverage data set
values(gcNorm)$td[overlaps[,1]]<-td.ranges$td[overlaps[,2]]
# now turn in back into a datatable
gcNorm<-data.table(chr=as.vector(seqnames(gcNorm)),start=start(gcNorm),end=end(gcNorm),td=gcNorm$td)
#remove the positional info and the gc info
gcNorm<-cbind(gcNorm,chr6Coverage[-c(1:3,26)])
# do some clearing up
chr6Coverage<-NULL
gc()
```
## Load in the gene annotation data
Now we have unified the coverage and Tajima's D datasets we can now begin to load in the gene annotation data. Included with this will be the neccesary maize1 and maize2 data.
```{r}
# load in the annotation data
gff<-fread("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/AGPv3.22_primary_transcripts.bed")
gff<-GRanges(seqnames=gff$V1, ranges=IRanges(gff$V2,gff$V3),name=gff$V4)
# remove scaffolds
gff<-subset(gff,subset=seqnames %in% c(1:10))
# prepare the GRanges object to receive the sub-genome info
values(gff)$sub.genome<-"no syn"
# load in the maize1 maize 2 subgenomes info
subGenomes<-read.csv("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/data/gene_by_sugenome.csv",na.strings=c("",".","NA"))
# attribute the correct sub-genome to each annotation
values(gff)$sub.genome[gff$name %in% subGenomes[,1]]<-"M1"
values(gff)$sub.genome[gff$name %in% subGenomes[,2]]<-"M2"
```
## Add samples names to the dataset
```{r,warning=FALSE,message=FALSE}
samples<-read.table("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/sample_list.txt")
samples<-as.vector(gsub(".sorted.bam","",samples$V1))
setnames(gcNorm,colnames(gcNorm),c(colnames(gcNorm)[1:4],samples))
```
## Filtering the data
Before we start, it might be a good idea to screen out windows that have really high coverage in B73, these are likely to represent repeatitive or poorly assembled region of the genome and should be excluded from further consideration.
```{r,warning=FALSE,message=FALSE}
#set the max read depth
maxDepth<-15
minDepth<-1
gcNorm<-subset(gcNorm,subset=gcNorm$B73 < maxDepth )
gcNorm<-subset(gcNorm, subset= gcNorm$B73 > minDepth)
```
## Runnig the CNV calling function
```{r, message=FALSE,warning=FALSE,results='hide'}
source("/Users/simonrenny-byfield/GitHubRepos/cnvwin/scripts/callCNV.R")
cnvs<-callCNV(gcNorm,samples,limit=1.4,limitHom=4)
dev.off()
# take a look at the genic region in terms of coverage
cov<-GRanges(seqnames=gcNorm$chr, ranges=IRanges(gcNorm$start,gcNorm$end),coverage=subset(gcNorm,select="B73"))
# check for overlaps between gcNorm and gff
geneData<-subsetByOverlaps(cov,gff,type = "within")
```
```{r,message=FALSE,warning=FALSE}
hist(geneData$coverage.B73, breaks = 40)
gcNorm
cnvs$cnvs
gcNorm<-cnvs$cnvs
freqs<-apply(subset(gcNorm,select=c(30:48)), 1 , function(x) sum(x))
head(freqs)
subset(gcNorm,select=c(30:48))
subset(gcNorm,select=c(28:47))
table(subset(gcNorm,select=c(28:47)))
downGroup<-gcNorm[apply(subset(gcNorm,select=c(28:47)),1,function(x) !all(x == 2) & !any(x==3) ),]
downGroup
gcNorm<-gcNorm[,JRIAL2T:=NULL]
freqs<-apply(subset(gcNorm,select=c(30:48)), 1 , function(x) sum(x))
# add a new column to the gcNorm table, note this is the frequency of the DNA segment
gcNorm<-gcNorm[,freq:=freqs]
gcNorm<-gcNorm[,JRIAL2T:=NULL]
source('~/.active-rstudio-document', echo=TRUE)
subset(gcNorm,select=c(30:48))
gcNorm
# load in the coverage data
load("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/gc_normalized_2000bp_median.RData")
gcNorm<-chr6Coverage
# turn into a GRanges object
gcNorm<-GRanges(seqnames=gcNorm$V1, ranges=IRanges(gcNorm$V2,gcNorm$V3))
###
# Check for overlaps and unify the data
###
# first make a variable not modify, with NA values
values(gcNorm)$td<-NA
# now check for overlaps, require "equal" because we want complete overlap
overlaps<-as.matrix(findOverlaps(gcNorm,td.ranges, type="equal"))
# use the hit matrix to add a value of TD to the coverage data set
values(gcNorm)$td[overlaps[,1]]<-td.ranges$td[overlaps[,2]]
# now turn in back into a datatable
gcNorm<-data.table(chr=as.vector(seqnames(gcNorm)),start=start(gcNorm),end=end(gcNorm),td=gcNorm$td)
#remove the positional info and the gc info
gcNorm<-cbind(gcNorm,chr6Coverage[-c(1:3,26)])
# do some clearing up
chr6Coverage<-NULL
gc()
```
## Load in the gene annotation data
Now we have unified the coverage and Tajima's D datasets we can now begin to load in the gene annotation data. Included with this will be the neccesary maize1 and maize2 data.
```{r}
# load in the annotation data
gff<-fread("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/AGPv3.22_primary_transcripts.bed")
gff<-GRanges(seqnames=gff$V1, ranges=IRanges(gff$V2,gff$V3),name=gff$V4)
# remove scaffolds
gff<-subset(gff,subset=seqnames %in% c(1:10))
# prepare the GRanges object to receive the sub-genome info
values(gff)$sub.genome<-"no syn"
# load in the maize1 maize 2 subgenomes info
subGenomes<-read.csv("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/data/gene_by_sugenome.csv",na.strings=c("",".","NA"))
# attribute the correct sub-genome to each annotation
values(gff)$sub.genome[gff$name %in% subGenomes[,1]]<-"M1"
values(gff)$sub.genome[gff$name %in% subGenomes[,2]]<-"M2"
```
## Add samples names to the dataset
```{r,warning=FALSE,message=FALSE}
samples<-read.table("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/sample_list.txt")
samples<-as.vector(gsub(".sorted.bam","",samples$V1))
setnames(gcNorm,colnames(gcNorm),c(colnames(gcNorm)[1:4],samples))
```
## Filtering the data
Before we start, it might be a good idea to screen out windows that have really high coverage in B73, these are likely to represent repeatitive or poorly assembled region of the genome and should be excluded from further consideration.
```{r,warning=FALSE,message=FALSE}
#set the max read depth
maxDepth<-15
minDepth<-1
gcNorm<-subset(gcNorm,subset=gcNorm$B73 < maxDepth )
gcNorm<-subset(gcNorm, subset= gcNorm$B73 > minDepth)
```
## Runnig the CNV calling function
```{r, message=FALSE,warning=FALSE,results='hide'}
source("/Users/simonrenny-byfield/GitHubRepos/cnvwin/scripts/callCNV.R")
cnvs<-callCNV(gcNorm,samples,limit=1.4,limitHom=4)
dev.off()
# take a look at the genic region in terms of coverage
cov<-GRanges(seqnames=gcNorm$chr, ranges=IRanges(gcNorm$start,gcNorm$end),coverage=subset(gcNorm,select="B73"))
# check for overlaps between gcNorm and gff
geneData<-subsetByOverlaps(cov,gff,type = "within")
```
```{r,message=FALSE,warning=FALSE}
hist(geneData$coverage.B73, breaks = 40)
```
Next, the best thing to do it to calculate the allele frequencies based on the genotype calls. We can do this using an apply function over the `gcNorm` table, using `sum` as a function. Later we can trim the CNVs we want by looking at only those with exclusively up, or down calls etc. At this stage:
* 0 is equivalent to homozygous for a deletion.
* 1 is equivalent heterozygous for a deletion.
* 2 is normal.
* 3 is more than two copies of a region.
```{r,message=FALSE,warning=FALSE}
# re-attribute the gcNorm data frame
gcNorm<-cnvs$cnvs
# remove the strange sample
gcNorm<-gcNorm[,JRIAL2T:=NULL]
gcNorm
subset(gcNorm,select=c(30:48))
subset(gcNorm,select=c(30:47))
gcNorm<-gcNorm[,JRIAL2T_CNV:=NULL]
subset(gcNorm,select=c(30:47))
subset(gcNorm,select=c(30:45))
subset(gcNorm,select=c(27:45))
freqs<-apply(subset(gcNorm,select=c(27:45)), 1 , function(x) sum(x))
# add a new column to the gcNorm table, note this is the frequency of the DNA segment
gcNorm<-gcNorm[,freq:=freqs]
downGroup<-gcNorm[apply(subset(gcNorm,select=c(28:47)),1,function(x) !all(x == 2) & !any(x==3) ),]
downGroup
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
propVariantSites
table(downGroup$freq)/sum(table(downGroup$freq))
SNPsfs<-SNPsfs[-c(1)]
SNPsfs<-SNPsfs/sum(SNPsfs)
barplot(rbind(SNPsfs,c(propVariantSites,0)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
propVariantSites
length(propVariantSites)
lenth(SNPsfs)
length(SNPsfs)
barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs/sum(SNPsfs)
SNPsfs
length(SNPsfs)
barplot(rbind(SNPsfs,c(propVariantSites),0),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
sum(SNPsfs)
SNPsfs/sum(SNPsfs)
sum(propVariantSites)
barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
propVariantSites
sum(table(downGroup$freq))
table(downGroup$freq)
subset(gcNorm,select=c(28:47))
downGroup
max(downGroup$freq)
subset(downGroup, subset=freq==39)
subset(gcNorm,select=c(7:47))
subset(gcNorm,select=c(27:47))
downGroup<-gcNorm[apply(subset(gcNorm,select=c(27:47)),1,function(x) !all(x == 2) & !any(x==3) ),]
# calculate the sfs for deletion
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs/sum(SNPsfs)
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
propVariantSites
length(SNPsfs)
length(propVariantSites)
SNPsfs
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs/sum(SNPsfs)[-39]
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
SNPsfs
length(SNPsfs)
SNPsfs<-(SNPsfs/sum(SNPsfs))[-39]
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
SNPsfs
length(SNPsfs)
min(downGroup$freq,38-downGroup$freq)
downGroup$freq
downGroup$freq
min(downGroup$freq,38-downGroup$freq)
38-downGroup$freq
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n")
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex=1.5)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axt=1.5)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex=1.5)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.5)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex=1.5)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex=1.5)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex.axis=1.4)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
38-downGroup$freq
alleleDiff<-38-downGroup$freq
d<-cbind(alleleDiff,downGroup$freq)
d
apply(d,1,min)
MAF<-apply(d,1,min)
table(MAF)
table(MAF)/sum(table(MAF))
sum(table(MAF)/sum(table(MAF)))
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs[-1]
SNPsfs<-(SNPsfs/sum(SNPsfs))
# plot the SFSs
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex.axis=1.4)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs[-1,38]
SNPsfs<-(SNPsfs/sum(SNPsfs))
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
downGroup<-gcNorm[apply(subset(gcNorm,select=c(27:47)),1,function(x) !all(x == 2) & !any(x==3) ),]
# calculate the sfs for deletion
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
propVariantSites
propVariantSites[-38]
# plot the SFSs
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex.axis=1.4)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
downGroup<-gcNorm[apply(subset(gcNorm,select=c(27:47)),1,function(x) !all(x == 2) & !any(x==3) ),]
# calculate the sfs for deletion
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
length(propVariantSites)
length(SNPsfs)
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs[c(-1,38)]# removed fixed classes
SNPsfs<-(SNPsfs/sum(SNPsfs))
SNPsfs
length(SNPsfs)
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs
#load in the snp sfs data
SNPsfs<-exp(scan("/Users/simonrenny-byfield/GitHubRepos/cnvwin/data/teosinte19.sfs"))
SNPsfs<-SNPsfs[-c(1,length(SNPsfs))]# removed fixed classes
length(SNPsfs)
SNPsfs<-(SNPsfs/sum(SNPsfs))
# calculate the folded SFSs for down CNVs
alleleDiff<-38-downGroup$freq
d<-cbind(alleleDiff,downGroup$freq)
MAF<-apply(d,1,min)
foldedPropVariantsSites<-table(MAF)/sum(table(MAF)
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
propVariantSites[-38]
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex.axis=1.4)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
length(propVariantSites)
propVariantSites[-38]
# calculate the sfs for deletion
propVariantSites<-rev(table(downGroup$freq)/sum(table(downGroup$freq)))
propVariantSites<-propVariantSites[-38]
b<-barplot(rbind(SNPsfs,c(propVariantSites)),beside=TRUE, col = c("darkolivegreen4","red"), xlab="frequency",
ylab="proportion of variant sites", xaxt="n", cex.axis=1.4, cex.lab=1.4)
Axlabel<-c(1,5,10,15,20,25,30,35)
AxAt<-(b[1,]+b[2,])/2
AxAt<-AxAt[seq(1,length(AxAt),by=5)]
axis(1,at=AxAt,labels=Axlabel,cex.axis=1.4)
legend("topright", legend=c("SNPs","down CNVs"), pch=15, col=c("darkolivegreen4","red"), cex=1.5, bty="n")
